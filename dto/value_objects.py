
from typing import Any, Dict, List
from pydantic import BaseModel, Field

class UploadRequest(BaseModel):
    filename: str
    description: str

class QueryRequest(BaseModel):
    question: str

class UploadResponse(BaseModel):
    message: str
    filename: str
    description: str
    # extracted_files: list[str]


class ChunkResponse(BaseModel):
    file_name: str
    chunk: str


class QueryResponse(BaseModel):
    question: str
    llm_answer: str = Field(description="The answer generated by the language model.")
    retrieved_chunks: List[ChunkResponse] = Field(description="List of code chunks retrieved by semantic search.")
    relevant_chunks_found: int = Field(description="Number of relevant chunks found.")


class CodeChunk(BaseModel):
    """Represents a meaningful chunk of Laravel code"""
    type: str  # 'controller', 'model', 'route', 'migration', etc.
    name: str
    file_path: str
    start_line: int
    end_line: int
    content: str
    metadata: Dict[str, Any]
    dependencies: List[str]


